#!/usr/bin/python
# os for handling opening files
from os import listdir
from os.path import isfile, join, splitext
# gooey for handling the gui
from gooey import Gooey, GooeyParser
# zip/gzip to handle opening and writing compressed files 
import gzip
import zipfile
# temp file for opening temp directory
import tempfile
# shutil for deleting the temp folder
import shutil
# os for handling directory functions
import os
# for pyinstaller
import sys

# pyinstaller values
nonbuffered_stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
sys.stdout = nonbuffered_stdout

@Gooey(advanced=True,  
       program_name='Concat app',       
       program_description = 'Concatenates files',       
       default_size=(500, 350),   # starting size of the GUI
       )
def main():
    # creating the parser
    parser = GooeyParser(description='Concatenation app concatenates .txt,.fastq,.zip, and .gz files')
    # adding the arguments
    parser.add_argument('inputDir',action='store',widget='DirChooser',help="The directory that contains the files to concatenate \
                                (Note: all files should have the same extension and valid extension,\
                                in case of zip the files inside all of the zips should have the same extension")
    parser.add_argument('outputName',action='store',widget='TextField' ,help="The name of the output file without the suffix")
    #parser.add_argument('toCompress',action='store', widget='CheckBox',  help="Compress the output")
    # parsing the arguments
    args = parser.parse_args()
    inputDir = args.inputDir
    outputName = args.outputName
    #toCompress = args.toCompress
    toCompress = True
    #getting the list of files in the directory
    files = [f for f in listdir(inputDir) if isfile(join(inputDir, f))]
    print 'Files:', str(files).strip('[]')
    # getting the extensions of the files
    extensions = [splitext(f)[1] for f in files]
   # checking if all file extension are equal to avoid errors
    if (validate(extensions) ):
        print "Starting to Work..."
        # creating temp directory
        temp_dir = tempfile.mkdtemp()
        try:
            if (extensions[0] == ".zip"):
                # running over the zip files and extarcting
                for i in range(len(files)):
                    zip_ref = zipfile.ZipFile(inputDir + '/' + files[i], 'r')
                    print "Extracting ", inputDir  + '/' + files[i]
                    # getting zip file members 
                    members = zip_ref.namelist()
                    zip_ref.extractall(temp_dir, members)
                    zip_ref.close()
                    print "Extracted: ",  str(members).strip('[]')
                    decompress = True # set decompress to true so concatenate will work on the temp_dir
                    # concatenating the files in the temp directory
                concatenateAndCompress(temp_dir, outputName, inputDir , decompress,  toCompress)
            elif (extensions[0] == ".gz"):
                # getting the extension of the gzipped files expecting same extension
                extension = splitext(splitext(files[0])[0])[1]
                # concatenating the files since there is no need to decompress
                # creating the empty outputgzip file to ensure the output is with the output name
                with gzip.open(inputDir+"/" + outputName + extension  + '.gz', 'wb') as f:
                    f.write("")
                # concatenating the files
                with open(inputDir+"/" + outputName + extension  + '.gz','ab') as wfp:
                      for fn in files:
                        with open(inputDir+"/" + fn, 'rb') as rfp:
                          shutil.copyfileobj(rfp, wfp)
                print "Finished creating concat file"
            elif (extensions[0] == ".txt" or extensions[0] == '.fastq'):
                decompress = False
                print ".fastq/.txt files - no need to decompress moving on to concatenate"
                # concatenating the files in the temp directory and compressing
                concatenateAndCompress(temp_dir, outputName, inputDir , decompress,  toCompress)
        finally:
            # deleting the temp directory
            #shutil.rmtree(temp_dir)
            print 'should uncomment deleting temp dir'
    else:
        print "Exiting..."

'''
Concatenate the files inside the temp directory and compressing if needed
decompressed - True if the files are expected to be in temp_dir otherwise in inputDir (since there is no need to decompress)
toCompress - True if the concatenate file will be compressed
'''
def concatenateAndCompress(temp_dir, outputName, inputDir , decompress,  toCompress):
    # getting the working dir according to the state of the files (already decompressED or needed to be decompressed
    if (decompress == True):
        workingDir = temp_dir
    else: 
        workingDir = inputDir
    # running over all of the files in the temp dir and concatenating files saving the in the original directory
    files = [f for f in listdir(workingDir) if isfile(join(workingDir, f))]
    # getting the extensions of the files
    extensions = [splitext(f)[1] for f in files]
    if (validate(extensions)):
        common_extension =  os.path.splitext(files[0])[1]
        print "ext: " , common_extension
        # concatenating the files
        with open(workingDir+"/"+ outputName + common_extension, 'wb') as concatFile:
            for filename in files:
                with open(workingDir+"/"+ filename, 'rb') as readfile:
                    shutil.copyfileobj(readfile, concatFile)
        # compress if compressing is needed
        if (toCompress):
            print "Compressing to gzip"
            #compressing output file
            with open(workingDir+"/"+ outputName + common_extension, 'rb') as f_in,  gzip.open(inputDir+"/" + outputName + common_extension + '.gz', 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)
            # deleting the concat file
            os.remove(workingDir+"/"+ outputName + common_extension)
            print "Finished Creating",  outputName,  '.gz'
        else:
            print "Finished creating concat file"
        
                    

'''
Validate that all of the extensions are the same and that they are of the type: '.txt', '.fastq', '.zip', '.gz'
'''
def validate(extensions): 
    # the list of values that are accepted
    result = True # will save the result of the function
    acceptedExt = ['.txt', '.fastq', '.zip', '.gz']
    # Check if all items extension are equal
    if(not all(x == extensions[0] for x in extensions)):
        print "Not all files are equal"
        result = False
    # Check if all items extensions are valid
    if (not all(x in acceptedExt for x in extensions)):
        print 'Not all items are with acceptable extension.'
        print 'acceptable extensions are:', str(acceptedExt).strip('[]')
        result = False
    return result
        

# define main as start module
if __name__ == "__main__":
    main()
